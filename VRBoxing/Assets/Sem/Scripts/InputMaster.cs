//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Sem/Scripts/InputMaster.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMaster : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMaster()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMaster"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""f5d367fb-81f4-4451-bd76-48f94399b0e5"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""48ab8a41-4219-4e81-b376-5ac6b89a1932"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""4be5d7ab-20ea-4c22-a318-a2295f3ae903"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Grab"",
                    ""type"": ""Button"",
                    ""id"": ""8cdb57fc-53c1-4631-a463-024478025fed"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=0.1,pressPoint=0.1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ReleaseGrab"",
                    ""type"": ""Button"",
                    ""id"": ""eae3842f-5219-4f47-babb-69782214b765"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(pressPoint=0.1,behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HardenFist"",
                    ""type"": ""Button"",
                    ""id"": ""2fc27d49-d03f-4c00-a1ee-9d63d3e85df7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=0.1,pressPoint=0.1)"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ReleaseHarden"",
                    ""type"": ""Button"",
                    ""id"": ""64e3c110-e38c-4adc-ae97-c0e909c62877"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RemoveBlock"",
                    ""type"": ""Button"",
                    ""id"": ""bcf0fe36-4ae4-49cd-9214-b59380981fd9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(pressPoint=0.1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ZaWarudo"",
                    ""type"": ""Button"",
                    ""id"": ""7603bab7-5c8c-44a5-a02c-dd86f5e546f6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(pressPoint=0.1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""StopMove"",
                    ""type"": ""Value"",
                    ""id"": ""4665bdfb-b51d-438c-94d0-318bf824bdd5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f00780db-8386-41d5-8d61-075f301061ec"",
                    ""path"": ""<OculusTouchController>{LeftHand}/thumbstick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Oculus"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6173f2ce-f197-44f2-8d57-6dd508caadaf"",
                    ""path"": ""<OculusTouchController>{RightHand}/thumbstick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Oculus"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""27b7ce97-a0fa-4079-8672-bfb19dbebe66"",
                    ""path"": ""<OculusTouchController>{LeftHand}/gripPressed"",
                    ""interactions"": ""Hold(duration=0.1,pressPoint=0.1)"",
                    ""processors"": """",
                    ""groups"": ""Oculus"",
                    ""action"": ""Grab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b9c1d795-c870-45c1-984f-3cbe3a00dc3f"",
                    ""path"": ""<OculusTouchController>{RightHand}/gripPressed"",
                    ""interactions"": ""Hold(duration=0.1,pressPoint=0.1)"",
                    ""processors"": """",
                    ""groups"": ""Oculus"",
                    ""action"": ""Grab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d3141acc-34e5-47c0-a08f-7d4d46a19009"",
                    ""path"": ""<OculusTouchController>{LeftHand}/triggerPressed"",
                    ""interactions"": ""Press(pressPoint=0.1)"",
                    ""processors"": """",
                    ""groups"": ""Oculus"",
                    ""action"": ""HardenFist"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5090cf43-8108-4ee1-af1c-9541aa258017"",
                    ""path"": ""<OculusTouchController>{RightHand}/triggerPressed"",
                    ""interactions"": ""Press(pressPoint=0.1)"",
                    ""processors"": """",
                    ""groups"": ""Oculus"",
                    ""action"": ""HardenFist"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8518ac62-644c-4fe8-a0b6-46cc22bb2d20"",
                    ""path"": ""<OculusTouchController>{RightHand}/primaryButton"",
                    ""interactions"": ""Hold(duration=0.1,pressPoint=0.1)"",
                    ""processors"": """",
                    ""groups"": ""Oculus"",
                    ""action"": ""RemoveBlock"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b077f8e6-fe7e-42ec-8343-7434af08f1ce"",
                    ""path"": ""<OculusTouchController>{LeftHand}/primaryButton"",
                    ""interactions"": ""Hold(duration=0.1,pressPoint=0.1)"",
                    ""processors"": """",
                    ""groups"": ""Oculus"",
                    ""action"": ""ZaWarudo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6e98883a-66a0-4e2b-a932-e5acd518ad45"",
                    ""path"": ""<OculusTouchController>{LeftHand}/gripPressed"",
                    ""interactions"": ""Press(pressPoint=0.1)"",
                    ""processors"": """",
                    ""groups"": ""Oculus"",
                    ""action"": ""ReleaseGrab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b263c756-25ce-4877-a03b-a528a1f316f8"",
                    ""path"": ""<OculusTouchController>{RightHand}/gripPressed"",
                    ""interactions"": ""Press(pressPoint=0.1)"",
                    ""processors"": """",
                    ""groups"": ""Oculus"",
                    ""action"": ""ReleaseGrab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6ec4c908-ff36-4483-9a74-3b19062bf7af"",
                    ""path"": ""<OculusTouchController>{RightHand}/triggerPressed"",
                    ""interactions"": ""Press(pressPoint=0.1)"",
                    ""processors"": """",
                    ""groups"": ""Oculus"",
                    ""action"": ""ReleaseHarden"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""66f86c57-d412-449f-baac-b3a25d71cbea"",
                    ""path"": ""<OculusTouchController>{LeftHand}/triggerPressed"",
                    ""interactions"": ""Press(pressPoint=0.1)"",
                    ""processors"": """",
                    ""groups"": ""Oculus"",
                    ""action"": ""ReleaseHarden"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e840ed2-3b9a-4365-9bb0-3ede80bf6e43"",
                    ""path"": ""<XRController>{LeftHand}/joystick"",
                    ""interactions"": ""Press(pressPoint=0.1)"",
                    ""processors"": """",
                    ""groups"": ""Oculus"",
                    ""action"": ""StopMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Oculus"",
            ""bindingGroup"": ""Oculus"",
            ""devices"": [
                {
                    ""devicePath"": ""<OculusHMD>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<OculusTouchController>{LeftHand}"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<OculusTouchController>{RightHand}"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Movement = m_Player.FindAction("Movement", throwIfNotFound: true);
        m_Player_Look = m_Player.FindAction("Look", throwIfNotFound: true);
        m_Player_Grab = m_Player.FindAction("Grab", throwIfNotFound: true);
        m_Player_ReleaseGrab = m_Player.FindAction("ReleaseGrab", throwIfNotFound: true);
        m_Player_HardenFist = m_Player.FindAction("HardenFist", throwIfNotFound: true);
        m_Player_ReleaseHarden = m_Player.FindAction("ReleaseHarden", throwIfNotFound: true);
        m_Player_RemoveBlock = m_Player.FindAction("RemoveBlock", throwIfNotFound: true);
        m_Player_ZaWarudo = m_Player.FindAction("ZaWarudo", throwIfNotFound: true);
        m_Player_StopMove = m_Player.FindAction("StopMove", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Movement;
    private readonly InputAction m_Player_Look;
    private readonly InputAction m_Player_Grab;
    private readonly InputAction m_Player_ReleaseGrab;
    private readonly InputAction m_Player_HardenFist;
    private readonly InputAction m_Player_ReleaseHarden;
    private readonly InputAction m_Player_RemoveBlock;
    private readonly InputAction m_Player_ZaWarudo;
    private readonly InputAction m_Player_StopMove;
    public struct PlayerActions
    {
        private @InputMaster m_Wrapper;
        public PlayerActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Player_Movement;
        public InputAction @Look => m_Wrapper.m_Player_Look;
        public InputAction @Grab => m_Wrapper.m_Player_Grab;
        public InputAction @ReleaseGrab => m_Wrapper.m_Player_ReleaseGrab;
        public InputAction @HardenFist => m_Wrapper.m_Player_HardenFist;
        public InputAction @ReleaseHarden => m_Wrapper.m_Player_ReleaseHarden;
        public InputAction @RemoveBlock => m_Wrapper.m_Player_RemoveBlock;
        public InputAction @ZaWarudo => m_Wrapper.m_Player_ZaWarudo;
        public InputAction @StopMove => m_Wrapper.m_Player_StopMove;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Look.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLook;
                @Grab.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGrab;
                @Grab.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGrab;
                @Grab.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGrab;
                @ReleaseGrab.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnReleaseGrab;
                @ReleaseGrab.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnReleaseGrab;
                @ReleaseGrab.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnReleaseGrab;
                @HardenFist.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHardenFist;
                @HardenFist.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHardenFist;
                @HardenFist.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHardenFist;
                @ReleaseHarden.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnReleaseHarden;
                @ReleaseHarden.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnReleaseHarden;
                @ReleaseHarden.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnReleaseHarden;
                @RemoveBlock.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRemoveBlock;
                @RemoveBlock.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRemoveBlock;
                @RemoveBlock.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRemoveBlock;
                @ZaWarudo.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnZaWarudo;
                @ZaWarudo.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnZaWarudo;
                @ZaWarudo.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnZaWarudo;
                @StopMove.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnStopMove;
                @StopMove.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnStopMove;
                @StopMove.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnStopMove;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Grab.started += instance.OnGrab;
                @Grab.performed += instance.OnGrab;
                @Grab.canceled += instance.OnGrab;
                @ReleaseGrab.started += instance.OnReleaseGrab;
                @ReleaseGrab.performed += instance.OnReleaseGrab;
                @ReleaseGrab.canceled += instance.OnReleaseGrab;
                @HardenFist.started += instance.OnHardenFist;
                @HardenFist.performed += instance.OnHardenFist;
                @HardenFist.canceled += instance.OnHardenFist;
                @ReleaseHarden.started += instance.OnReleaseHarden;
                @ReleaseHarden.performed += instance.OnReleaseHarden;
                @ReleaseHarden.canceled += instance.OnReleaseHarden;
                @RemoveBlock.started += instance.OnRemoveBlock;
                @RemoveBlock.performed += instance.OnRemoveBlock;
                @RemoveBlock.canceled += instance.OnRemoveBlock;
                @ZaWarudo.started += instance.OnZaWarudo;
                @ZaWarudo.performed += instance.OnZaWarudo;
                @ZaWarudo.canceled += instance.OnZaWarudo;
                @StopMove.started += instance.OnStopMove;
                @StopMove.performed += instance.OnStopMove;
                @StopMove.canceled += instance.OnStopMove;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    private int m_OculusSchemeIndex = -1;
    public InputControlScheme OculusScheme
    {
        get
        {
            if (m_OculusSchemeIndex == -1) m_OculusSchemeIndex = asset.FindControlSchemeIndex("Oculus");
            return asset.controlSchemes[m_OculusSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnGrab(InputAction.CallbackContext context);
        void OnReleaseGrab(InputAction.CallbackContext context);
        void OnHardenFist(InputAction.CallbackContext context);
        void OnReleaseHarden(InputAction.CallbackContext context);
        void OnRemoveBlock(InputAction.CallbackContext context);
        void OnZaWarudo(InputAction.CallbackContext context);
        void OnStopMove(InputAction.CallbackContext context);
    }
}
