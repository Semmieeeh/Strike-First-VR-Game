//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Sem/Scripts/InputMaster.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMaster : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMaster()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMaster"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""f5d367fb-81f4-4451-bd76-48f94399b0e5"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""48ab8a41-4219-4e81-b376-5ac6b89a1932"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""4be5d7ab-20ea-4c22-a318-a2295f3ae903"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Grab"",
                    ""type"": ""Button"",
                    ""id"": ""8cdb57fc-53c1-4631-a463-024478025fed"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=0.1,pressPoint=0.1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ReleaseGrab"",
                    ""type"": ""Button"",
                    ""id"": ""eae3842f-5219-4f47-babb-69782214b765"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(pressPoint=0.1,behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HardenLeftFist"",
                    ""type"": ""Button"",
                    ""id"": ""2fc27d49-d03f-4c00-a1ee-9d63d3e85df7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=0.1,pressPoint=0.1)"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""HardenRightFist"",
                    ""type"": ""Button"",
                    ""id"": ""026752df-8cf0-4de3-922c-252c2b2834a1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=0.1,pressPoint=0.1)"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ReleaseHardenRight"",
                    ""type"": ""Button"",
                    ""id"": ""64e3c110-e38c-4adc-ae97-c0e909c62877"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ReleaseHardenLeft"",
                    ""type"": ""Button"",
                    ""id"": ""0163538a-8368-4679-9f2a-619585e1a8d9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Heal"",
                    ""type"": ""Button"",
                    ""id"": ""bcf0fe36-4ae4-49cd-9214-b59380981fd9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(pressPoint=0.1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BlockRight"",
                    ""type"": ""Button"",
                    ""id"": ""7603bab7-5c8c-44a5-a02c-dd86f5e546f6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(pressPoint=0.1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BlockLeft"",
                    ""type"": ""Button"",
                    ""id"": ""5c6b37f9-0d8e-44bf-a776-f601ce6e1f85"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(pressPoint=0.1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ResetCam"",
                    ""type"": ""Button"",
                    ""id"": ""9a9ca80d-947f-40d7-b470-940d51dcbfa4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shotgun"",
                    ""type"": ""Button"",
                    ""id"": ""db1b8747-92bf-4c6c-9394-740fb5851c71"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(pressPoint=0.1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShotgunDis"",
                    ""type"": ""Button"",
                    ""id"": ""776f8b52-9944-4fe2-93f1-0acc44402f00"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(pressPoint=0.1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShootShotgun"",
                    ""type"": ""Button"",
                    ""id"": ""05a3e4f7-6a35-467c-aff3-f936ab5a8a08"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=0.1,pressPoint=0.1)"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Disconnect"",
                    ""type"": ""Button"",
                    ""id"": ""44ff56d8-07a4-48a9-87bc-858a95e8503b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(pressPoint=0.1)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f00780db-8386-41d5-8d61-075f301061ec"",
                    ""path"": ""<OculusTouchController>{LeftHand}/thumbstick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Oculus"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6173f2ce-f197-44f2-8d57-6dd508caadaf"",
                    ""path"": ""<OculusTouchController>{RightHand}/thumbstick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Oculus"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""27b7ce97-a0fa-4079-8672-bfb19dbebe66"",
                    ""path"": ""<OculusTouchController>{LeftHand}/gripPressed"",
                    ""interactions"": ""Hold(duration=0.1,pressPoint=0.1)"",
                    ""processors"": """",
                    ""groups"": ""Oculus"",
                    ""action"": ""Grab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b9c1d795-c870-45c1-984f-3cbe3a00dc3f"",
                    ""path"": ""<OculusTouchController>{RightHand}/gripPressed"",
                    ""interactions"": ""Hold(duration=0.1,pressPoint=0.1)"",
                    ""processors"": """",
                    ""groups"": ""Oculus"",
                    ""action"": ""Grab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d3141acc-34e5-47c0-a08f-7d4d46a19009"",
                    ""path"": ""<OculusTouchController>{LeftHand}/triggerPressed"",
                    ""interactions"": ""Press(pressPoint=0.1)"",
                    ""processors"": """",
                    ""groups"": ""Oculus"",
                    ""action"": ""HardenLeftFist"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8518ac62-644c-4fe8-a0b6-46cc22bb2d20"",
                    ""path"": ""<OculusTouchController>{RightHand}/primaryButton"",
                    ""interactions"": ""Hold(duration=0.1,pressPoint=0.1)"",
                    ""processors"": """",
                    ""groups"": ""Oculus"",
                    ""action"": ""Heal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6e98883a-66a0-4e2b-a932-e5acd518ad45"",
                    ""path"": ""<OculusTouchController>{LeftHand}/gripPressed"",
                    ""interactions"": ""Press(pressPoint=0.1)"",
                    ""processors"": """",
                    ""groups"": ""Oculus"",
                    ""action"": ""ReleaseGrab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b263c756-25ce-4877-a03b-a528a1f316f8"",
                    ""path"": ""<OculusTouchController>{RightHand}/gripPressed"",
                    ""interactions"": ""Press(pressPoint=0.1)"",
                    ""processors"": """",
                    ""groups"": ""Oculus"",
                    ""action"": ""ReleaseGrab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fadae63c-9738-4114-892e-be9569b0be66"",
                    ""path"": ""<OculusTouchController>{RightHand}/triggerPressed"",
                    ""interactions"": ""Press(pressPoint=0.1)"",
                    ""processors"": """",
                    ""groups"": ""Oculus"",
                    ""action"": ""HardenRightFist"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""17377223-3932-4a46-b02a-5ca0fedce08e"",
                    ""path"": ""<OculusTouchController>{LeftHand}/triggerPressed"",
                    ""interactions"": ""Press(pressPoint=0.1)"",
                    ""processors"": """",
                    ""groups"": ""Oculus"",
                    ""action"": ""ReleaseHardenLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6ec4c908-ff36-4483-9a74-3b19062bf7af"",
                    ""path"": ""<OculusTouchController>{RightHand}/triggerPressed"",
                    ""interactions"": ""Press(pressPoint=0.1)"",
                    ""processors"": """",
                    ""groups"": ""Oculus"",
                    ""action"": ""ReleaseHardenRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""104aed5e-a745-4414-b88a-c74a1fef2ec6"",
                    ""path"": ""<OculusTouchController>{RightHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BlockRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a9fe9e50-669a-4eec-b8a7-6f5d9cfd0811"",
                    ""path"": ""<OculusTouchController>{LeftHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BlockLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8905fa6e-0028-4bf1-9807-e82493f8ea66"",
                    ""path"": ""<OculusTouchController>{LeftHand}/secondaryButton"",
                    ""interactions"": ""Hold(duration=0.1,pressPoint=0.1)"",
                    ""processors"": """",
                    ""groups"": ""Oculus"",
                    ""action"": ""ResetCam"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3912d738-a111-4b0f-846e-3c0390cc315e"",
                    ""path"": ""<OculusTouchController>{RightHand}/secondaryButton"",
                    ""interactions"": ""Hold(duration=0.1,pressPoint=0.1)"",
                    ""processors"": """",
                    ""groups"": ""Oculus"",
                    ""action"": ""Shotgun"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""744cfa87-c5f6-4780-a238-764cdb071a08"",
                    ""path"": ""<OculusTouchController>{RightHand}/secondaryButton"",
                    ""interactions"": ""Hold(duration=0.1,pressPoint=0.1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShotgunDis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13ab6f58-194e-46d3-a6ad-994ebc9a68f3"",
                    ""path"": ""<OculusTouchController>{RightHand}/triggerPressed"",
                    ""interactions"": ""Press(pressPoint=0.1)"",
                    ""processors"": """",
                    ""groups"": ""Oculus"",
                    ""action"": ""ShootShotgun"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""94a4435a-7004-4f9b-9284-d6c4d75d541d"",
                    ""path"": ""<OculusTouchController>{LeftHand}/secondaryButton"",
                    ""interactions"": ""Press(pressPoint=0.1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Disconnect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Oculus"",
            ""bindingGroup"": ""Oculus"",
            ""devices"": [
                {
                    ""devicePath"": ""<OculusHMD>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<OculusTouchController>{LeftHand}"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<OculusTouchController>{RightHand}"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Movement = m_Player.FindAction("Movement", throwIfNotFound: true);
        m_Player_Look = m_Player.FindAction("Look", throwIfNotFound: true);
        m_Player_Grab = m_Player.FindAction("Grab", throwIfNotFound: true);
        m_Player_ReleaseGrab = m_Player.FindAction("ReleaseGrab", throwIfNotFound: true);
        m_Player_HardenLeftFist = m_Player.FindAction("HardenLeftFist", throwIfNotFound: true);
        m_Player_HardenRightFist = m_Player.FindAction("HardenRightFist", throwIfNotFound: true);
        m_Player_ReleaseHardenRight = m_Player.FindAction("ReleaseHardenRight", throwIfNotFound: true);
        m_Player_ReleaseHardenLeft = m_Player.FindAction("ReleaseHardenLeft", throwIfNotFound: true);
        m_Player_Heal = m_Player.FindAction("Heal", throwIfNotFound: true);
        m_Player_BlockRight = m_Player.FindAction("BlockRight", throwIfNotFound: true);
        m_Player_BlockLeft = m_Player.FindAction("BlockLeft", throwIfNotFound: true);
        m_Player_ResetCam = m_Player.FindAction("ResetCam", throwIfNotFound: true);
        m_Player_Shotgun = m_Player.FindAction("Shotgun", throwIfNotFound: true);
        m_Player_ShotgunDis = m_Player.FindAction("ShotgunDis", throwIfNotFound: true);
        m_Player_ShootShotgun = m_Player.FindAction("ShootShotgun", throwIfNotFound: true);
        m_Player_Disconnect = m_Player.FindAction("Disconnect", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Movement;
    private readonly InputAction m_Player_Look;
    private readonly InputAction m_Player_Grab;
    private readonly InputAction m_Player_ReleaseGrab;
    private readonly InputAction m_Player_HardenLeftFist;
    private readonly InputAction m_Player_HardenRightFist;
    private readonly InputAction m_Player_ReleaseHardenRight;
    private readonly InputAction m_Player_ReleaseHardenLeft;
    private readonly InputAction m_Player_Heal;
    private readonly InputAction m_Player_BlockRight;
    private readonly InputAction m_Player_BlockLeft;
    private readonly InputAction m_Player_ResetCam;
    private readonly InputAction m_Player_Shotgun;
    private readonly InputAction m_Player_ShotgunDis;
    private readonly InputAction m_Player_ShootShotgun;
    private readonly InputAction m_Player_Disconnect;
    public struct PlayerActions
    {
        private @InputMaster m_Wrapper;
        public PlayerActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Player_Movement;
        public InputAction @Look => m_Wrapper.m_Player_Look;
        public InputAction @Grab => m_Wrapper.m_Player_Grab;
        public InputAction @ReleaseGrab => m_Wrapper.m_Player_ReleaseGrab;
        public InputAction @HardenLeftFist => m_Wrapper.m_Player_HardenLeftFist;
        public InputAction @HardenRightFist => m_Wrapper.m_Player_HardenRightFist;
        public InputAction @ReleaseHardenRight => m_Wrapper.m_Player_ReleaseHardenRight;
        public InputAction @ReleaseHardenLeft => m_Wrapper.m_Player_ReleaseHardenLeft;
        public InputAction @Heal => m_Wrapper.m_Player_Heal;
        public InputAction @BlockRight => m_Wrapper.m_Player_BlockRight;
        public InputAction @BlockLeft => m_Wrapper.m_Player_BlockLeft;
        public InputAction @ResetCam => m_Wrapper.m_Player_ResetCam;
        public InputAction @Shotgun => m_Wrapper.m_Player_Shotgun;
        public InputAction @ShotgunDis => m_Wrapper.m_Player_ShotgunDis;
        public InputAction @ShootShotgun => m_Wrapper.m_Player_ShootShotgun;
        public InputAction @Disconnect => m_Wrapper.m_Player_Disconnect;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Look.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLook;
                @Grab.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGrab;
                @Grab.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGrab;
                @Grab.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGrab;
                @ReleaseGrab.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnReleaseGrab;
                @ReleaseGrab.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnReleaseGrab;
                @ReleaseGrab.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnReleaseGrab;
                @HardenLeftFist.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHardenLeftFist;
                @HardenLeftFist.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHardenLeftFist;
                @HardenLeftFist.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHardenLeftFist;
                @HardenRightFist.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHardenRightFist;
                @HardenRightFist.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHardenRightFist;
                @HardenRightFist.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHardenRightFist;
                @ReleaseHardenRight.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnReleaseHardenRight;
                @ReleaseHardenRight.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnReleaseHardenRight;
                @ReleaseHardenRight.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnReleaseHardenRight;
                @ReleaseHardenLeft.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnReleaseHardenLeft;
                @ReleaseHardenLeft.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnReleaseHardenLeft;
                @ReleaseHardenLeft.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnReleaseHardenLeft;
                @Heal.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHeal;
                @Heal.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHeal;
                @Heal.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHeal;
                @BlockRight.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnBlockRight;
                @BlockRight.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnBlockRight;
                @BlockRight.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnBlockRight;
                @BlockLeft.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnBlockLeft;
                @BlockLeft.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnBlockLeft;
                @BlockLeft.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnBlockLeft;
                @ResetCam.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnResetCam;
                @ResetCam.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnResetCam;
                @ResetCam.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnResetCam;
                @Shotgun.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnShotgun;
                @Shotgun.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnShotgun;
                @Shotgun.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnShotgun;
                @ShotgunDis.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnShotgunDis;
                @ShotgunDis.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnShotgunDis;
                @ShotgunDis.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnShotgunDis;
                @ShootShotgun.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnShootShotgun;
                @ShootShotgun.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnShootShotgun;
                @ShootShotgun.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnShootShotgun;
                @Disconnect.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDisconnect;
                @Disconnect.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDisconnect;
                @Disconnect.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDisconnect;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Grab.started += instance.OnGrab;
                @Grab.performed += instance.OnGrab;
                @Grab.canceled += instance.OnGrab;
                @ReleaseGrab.started += instance.OnReleaseGrab;
                @ReleaseGrab.performed += instance.OnReleaseGrab;
                @ReleaseGrab.canceled += instance.OnReleaseGrab;
                @HardenLeftFist.started += instance.OnHardenLeftFist;
                @HardenLeftFist.performed += instance.OnHardenLeftFist;
                @HardenLeftFist.canceled += instance.OnHardenLeftFist;
                @HardenRightFist.started += instance.OnHardenRightFist;
                @HardenRightFist.performed += instance.OnHardenRightFist;
                @HardenRightFist.canceled += instance.OnHardenRightFist;
                @ReleaseHardenRight.started += instance.OnReleaseHardenRight;
                @ReleaseHardenRight.performed += instance.OnReleaseHardenRight;
                @ReleaseHardenRight.canceled += instance.OnReleaseHardenRight;
                @ReleaseHardenLeft.started += instance.OnReleaseHardenLeft;
                @ReleaseHardenLeft.performed += instance.OnReleaseHardenLeft;
                @ReleaseHardenLeft.canceled += instance.OnReleaseHardenLeft;
                @Heal.started += instance.OnHeal;
                @Heal.performed += instance.OnHeal;
                @Heal.canceled += instance.OnHeal;
                @BlockRight.started += instance.OnBlockRight;
                @BlockRight.performed += instance.OnBlockRight;
                @BlockRight.canceled += instance.OnBlockRight;
                @BlockLeft.started += instance.OnBlockLeft;
                @BlockLeft.performed += instance.OnBlockLeft;
                @BlockLeft.canceled += instance.OnBlockLeft;
                @ResetCam.started += instance.OnResetCam;
                @ResetCam.performed += instance.OnResetCam;
                @ResetCam.canceled += instance.OnResetCam;
                @Shotgun.started += instance.OnShotgun;
                @Shotgun.performed += instance.OnShotgun;
                @Shotgun.canceled += instance.OnShotgun;
                @ShotgunDis.started += instance.OnShotgunDis;
                @ShotgunDis.performed += instance.OnShotgunDis;
                @ShotgunDis.canceled += instance.OnShotgunDis;
                @ShootShotgun.started += instance.OnShootShotgun;
                @ShootShotgun.performed += instance.OnShootShotgun;
                @ShootShotgun.canceled += instance.OnShootShotgun;
                @Disconnect.started += instance.OnDisconnect;
                @Disconnect.performed += instance.OnDisconnect;
                @Disconnect.canceled += instance.OnDisconnect;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    private int m_OculusSchemeIndex = -1;
    public InputControlScheme OculusScheme
    {
        get
        {
            if (m_OculusSchemeIndex == -1) m_OculusSchemeIndex = asset.FindControlSchemeIndex("Oculus");
            return asset.controlSchemes[m_OculusSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnGrab(InputAction.CallbackContext context);
        void OnReleaseGrab(InputAction.CallbackContext context);
        void OnHardenLeftFist(InputAction.CallbackContext context);
        void OnHardenRightFist(InputAction.CallbackContext context);
        void OnReleaseHardenRight(InputAction.CallbackContext context);
        void OnReleaseHardenLeft(InputAction.CallbackContext context);
        void OnHeal(InputAction.CallbackContext context);
        void OnBlockRight(InputAction.CallbackContext context);
        void OnBlockLeft(InputAction.CallbackContext context);
        void OnResetCam(InputAction.CallbackContext context);
        void OnShotgun(InputAction.CallbackContext context);
        void OnShotgunDis(InputAction.CallbackContext context);
        void OnShootShotgun(InputAction.CallbackContext context);
        void OnDisconnect(InputAction.CallbackContext context);
    }
}
